C:37:"PHPUnit\Runner\DefaultTestResultCache":21842:{a:2:{s:7:"defects";a:0:{}s:5:"times";a:228:{s:65:"Paramee\Exception\InvalidParameterExceptionTest::testFromMessages";d:0.005;s:64:"Paramee\Exception\InvalidParameterExceptionTest::testConstructor";d:0.002;s:63:"Paramee\Format\AlphanumericFormatTest::testValidValueIsPrepared";d:0.007;s:71:"Paramee\Format\AlphanumericFormatTest::testNonValidValueThrowsException";d:0.006;s:62:"Paramee\Format\AlphanumericFormatTest::testGetPreparationSteps";d:0.001;s:56:"Paramee\Format\AlphanumericFormatTest::testAppliesToType";d:0.001;s:61:"Paramee\Format\AlphanumericFormatTest::testGetValidationRules";d:0.001;s:59:"Paramee\Format\AlphanumericFormatTest::testToStringNotEmpty";d:0.001;s:70:"Paramee\Format\AlphanumericFormatTest::testExpectedDocumentationExists";d:0.003;s:75:"Paramee\Model\ParameterValueTest::testIsPreparedReturnsFalseWhenNotPrepared";d:0.001;s:71:"Paramee\Model\ParameterValueTest::testIsPreparedReturnsTrueWhenPrepared";d:0.001;s:84:"Paramee\Model\ParameterValueTest::testGetPreparedValueThrowsExceptionWhenNotPrepared";d:0.001;s:74:"Paramee\Model\ParameterValueTest::testGetPreparedValueReturnsPreparedValue";d:0.001;s:45:"Paramee\Model\ParameterValueTest::testGetName";d:0.001;s:49:"Paramee\Model\ParameterValueTest::testGetRawValue";d:0.001;s:54:"Paramee\Model\ParameterValueTest::testValueIsImmutable";d:0.001;s:44:"Paramee\Model\ParameterValuesTest::testCount";d:0.001;s:49:"Paramee\Model\ParameterValuesTest::testGetContext";d:0.001;s:74:"Paramee\Model\ParameterValuesTest::testGetPreparedValueWhenValueIsPrepared";d:0.001;s:92:"Paramee\Model\ParameterValuesTest::testGetPreparedValueThrowsExceptionWhenValueIsNotPrepared";d:0.001;s:50:"Paramee\Model\ParameterValuesTest::testGetRawValue";d:0.001;s:47:"Paramee\Model\ParameterValuesTest::testHasValue";d:0.001;s:50:"Paramee\Model\ParameterValuesTest::testGetIterator";d:0.001;s:76:"Paramee\Model\ParameterValuesTest::testPreparationWorksCorrectlyWithIterator";d:0.001;s:102:"Paramee\ParamDeserializer\StandardDeserializerTest::testDeserializeArrayWithValidData with data set #0";d:0.001;s:102:"Paramee\ParamDeserializer\StandardDeserializerTest::testDeserializeArrayWithValidData with data set #1";d:0.002;s:102:"Paramee\ParamDeserializer\StandardDeserializerTest::testDeserializeArrayWithValidData with data set #2";d:0.003;s:102:"Paramee\ParamDeserializer\StandardDeserializerTest::testDeserializeArrayWithValidData with data set #3";d:0.002;s:103:"Paramee\ParamDeserializer\StandardDeserializerTest::testDeserializeObjectWithValidData with data set #0";d:0.002;s:103:"Paramee\ParamDeserializer\StandardDeserializerTest::testDeserializeObjectWithValidData with data set #1";d:0.002;s:103:"Paramee\ParamDeserializer\StandardDeserializerTest::testDeserializeObjectWithValidData with data set #2";d:0.003;s:101:"Paramee\ParamDeserializer\StandardDeserializerTest::testDeserializeObjectThrowsExceptionOnInvalidType";d:0.001;s:100:"Paramee\ParamDeserializer\StandardDeserializerTest::testDeserializeArrayThrowsExceptionOnInvalidType";d:0.001;s:84:"Paramee\ParamDeserializer\StandardDeserializerTest::testGarbledStringThrowsException";d:0.001;s:110:"Paramee\PreparationStep\ArrayItemsPreparationStepTest::testValuesAreReturnedAsIsWhenToParametersOrForEachIsSet";d:0.011;s:102:"Paramee\PreparationStep\ArrayItemsPreparationStepTest::testForEachRunsWhenNoMappingButForeachSpecified";d:0.007;s:113:"Paramee\PreparationStep\ArrayItemsPreparationStepTest::testInvokeThrowsInvalidArgumentExceptionWhenArrayNotPassed";d:0.002;s:122:"Paramee\PreparationStep\ArrayItemsPreparationStepTest::testInvokeFindsFirstWorkingParameterWhenMoreThanOnePerTypeIsDefined";d:0.003;s:139:"Paramee\PreparationStep\ArrayItemsPreparationStepTest::testInvokeThrowsExpectedExceptionWhenMorThanOneParameterPerTypeIsDefinedAndNoneMatch";d:0.008;s:108:"Paramee\PreparationStep\ArrayItemsPreparationStepTest::testForEachIsRunAfterWhenMultipleParameterRulesAreSet";d:0.005;s:104:"Paramee\PreparationStep\ArrayItemsPreparationStepTest::testForEachIsRunAfterWhenSingleParameterRuleIsSet";d:0.002;s:107:"Paramee\PreparationStep\ArrayItemsPreparationStepTest::testNonExplicitlyMappedSingleParameterAllowsTypeCast";d:0.004;s:113:"Paramee\PreparationStep\CallbackStepTest::testInvokeConvertsInvalidArgumentExceptionIntoInvalidParameterException";d:0.002;s:91:"Paramee\PreparationStep\DependencyCheckStepTest::testMustExistSucceedsWhenOtherValuePresent";d:0.001;s:87:"Paramee\PreparationStep\DependencyCheckStepTest::testMustExistFailsWhenOtherValueAbsent";d:0.002;s:93:"Paramee\PreparationStep\DependencyCheckStepTest::testMustNotExistSucceedsWhenOtherValueAbsent";d:0.001;s:91:"Paramee\PreparationStep\DependencyCheckStepTest::testMustNotExistFailsWhenOtherValuePresent";d:0.001;s:87:"Paramee\PreparationStep\DependencyCheckStepTest::testCallbacksRunIfParametersArePresent";d:0.001;s:97:"Paramee\PreparationStep\DependencyCheckStepTest::testCallbacksAreSkippedIfParametersAreNotPresent";d:0.001;s:123:"Paramee\PreparationStep\DependencyCheckStepTest::testCallbackInvalidArgumentExceptionIsConvertedToInvalidParameterException";d:0.001;s:86:"Paramee\PreparationStep\DependencyCheckStepTest::testCallbackOtherExceptionIsNotCaught";d:0.001;s:78:"Paramee\Type\ArrayParameterTest::testHeterogeneousTypesAllowedWhenNoTypesAdded";d:0.018;s:85:"Paramee\Type\ArrayParameterTest::testSetAllowedParamDefinitionMultipleWithValidValues";d:0.005;s:83:"Paramee\Type\ArrayParameterTest::testSetAllowedParamDefinitionSingleWithValidValues";d:0.002;s:85:"Paramee\Type\ArrayParameterTest::testSetAllowedParamDefinitionSingleWithInvalidValues";d:0.002;s:73:"Paramee\Type\ArrayParameterTest::testSetAllowedTypesWithValidTypesAndData";d:0.005;s:86:"Paramee\Type\ArrayParameterTest::testSetAllowedTypesThrowsExceptionWithNonExistentType";d:0.001;s:95:"Paramee\Type\ArrayParameterTest::testSetAllowedTypesThrowsExceptionWithValidTypesButInvalidData";d:0.003;s:79:"Paramee\Type\ArrayParameterTest::testSetAllowedParamDefinitionWithInvalidValues";d:0.006;s:57:"Paramee\Type\ArrayParameterTest::testDescribeWithDefaults";d:0.003;s:61:"Paramee\Type\ArrayParameterTest::testDescribeWithParameterSet";d:0.003;s:70:"Paramee\Type\ArrayParameterTest::testDescribeWithMultipleParametersSet";d:0.004;s:66:"Paramee\Type\ArrayParameterTest::testSetUniqueItemsWithUniqueItems";d:0.012;s:66:"Paramee\Type\ArrayParameterTest::testSetUniqueItemsWithInvalidData";d:0.004;s:48:"Paramee\Type\ArrayParameterTest::testSetMinItems";d:0.007;s:48:"Paramee\Type\ArrayParameterTest::testSetMaxItems";d:0.004;s:89:"Paramee\Type\ArrayParameterTest::testInvalidParameterExceptionReflectsPathOfItemCorrectly";d:0.014;s:94:"Paramee\Type\ArrayParameterTest::testInvalidParameterInNestedObjectReflectsPathOfItemCorrectly";d:0.013;s:77:"Paramee\Type\ArrayParameterTest::testContextWithDeserializerDeserializesArray";d:0.01;s:92:"Paramee\Type\ArrayParameterTest::testPrepareThrowsInvalidParameterExceptionWihNoDeserializer";d:0.002;s:109:"Paramee\Type\ArrayParameterTest::testPrepareThrowsInvalidParameterExceptionWithDeserializerButInvalidDataType";d:0.002;s:81:"Paramee\Type\ArrayParameterTest::testParameterDocumentationContainsExpectedValues";d:0.002;s:54:"Paramee\Type\ArrayParameterTest::testStringReturnsName";d:0.001;s:87:"Paramee\Type\ArrayParameterTest::testTypeCastWorksCorrectlyWhenEnabled with data set #0";d:0.002;s:87:"Paramee\Type\ArrayParameterTest::testTypeCastWorksCorrectlyWhenEnabled with data set #1";d:0.004;s:87:"Paramee\Type\ArrayParameterTest::testTypeCastWorksCorrectlyWhenEnabled with data set #2";d:0.005;s:87:"Paramee\Type\ArrayParameterTest::testTypeCastWorksCorrectlyWhenEnabled with data set #3";d:0.003;s:103:"Paramee\Type\ArrayParameterTest::testTypeCastThrowsExceptionForInvalidTypeWhenDisabled with data set #0";d:0.002;s:103:"Paramee\Type\ArrayParameterTest::testTypeCastThrowsExceptionForInvalidTypeWhenDisabled with data set #1";d:0.002;s:103:"Paramee\Type\ArrayParameterTest::testTypeCastThrowsExceptionForInvalidTypeWhenDisabled with data set #2";d:0.002;s:103:"Paramee\Type\ArrayParameterTest::testTypeCastThrowsExceptionForInvalidTypeWhenDisabled with data set #3";d:0.002;s:71:"Paramee\Type\ArrayParameterTest::testNullValueThrowsExceptionIfDisabled";d:0.002;s:78:"Paramee\Type\ArrayParameterTest::testNullValueWrapsPreparationStepsWhenEnabled";d:0.002;s:68:"Paramee\Type\ArrayParameterTest::testNullValueIsUnchangedWhenEnabled";d:0.002;s:80:"Paramee\Type\ArrayParameterTest::testEnumCheckRunsIfEnumPresent with data set #0";d:0.012;s:80:"Paramee\Type\ArrayParameterTest::testEnumCheckRunsIfEnumPresent with data set #1";d:0.004;s:80:"Paramee\Type\ArrayParameterTest::testEnumCheckRunsIfEnumPresent with data set #2";d:0.009;s:67:"Paramee\Type\ArrayParameterTest::testEnumCheckFailsIfEnumNotPresent";d:0.003;s:82:"Paramee\Type\ArrayParameterTest::testDependencyTestRunsAndFailsIfMissingDependency";d:0.002;s:98:"Paramee\Type\ArrayParameterTest::testDependencyTestDoesNotRunWhenParameterValuesNotPassedToPrepare";d:0.01;s:92:"Paramee\Type\ArrayParameterTest::testDependencyTestRunsAndFailsIfOtherNotAllowedParamPresent";d:0.002;s:83:"Paramee\Type\BooleanParameterTest::testParameterDocumentationContainsExpectedValues";d:0.002;s:56:"Paramee\Type\BooleanParameterTest::testStringReturnsName";d:0.001;s:89:"Paramee\Type\BooleanParameterTest::testTypeCastWorksCorrectlyWhenEnabled with data set #0";d:0.002;s:89:"Paramee\Type\BooleanParameterTest::testTypeCastWorksCorrectlyWhenEnabled with data set #1";d:0.004;s:89:"Paramee\Type\BooleanParameterTest::testTypeCastWorksCorrectlyWhenEnabled with data set #2";d:0.002;s:89:"Paramee\Type\BooleanParameterTest::testTypeCastWorksCorrectlyWhenEnabled with data set #3";d:0.002;s:105:"Paramee\Type\BooleanParameterTest::testTypeCastThrowsExceptionForInvalidTypeWhenDisabled with data set #0";d:0.002;s:105:"Paramee\Type\BooleanParameterTest::testTypeCastThrowsExceptionForInvalidTypeWhenDisabled with data set #1";d:0.003;s:105:"Paramee\Type\BooleanParameterTest::testTypeCastThrowsExceptionForInvalidTypeWhenDisabled with data set #2";d:0.002;s:105:"Paramee\Type\BooleanParameterTest::testTypeCastThrowsExceptionForInvalidTypeWhenDisabled with data set #3";d:0.002;s:73:"Paramee\Type\BooleanParameterTest::testNullValueThrowsExceptionIfDisabled";d:0.002;s:80:"Paramee\Type\BooleanParameterTest::testNullValueWrapsPreparationStepsWhenEnabled";d:0.002;s:70:"Paramee\Type\BooleanParameterTest::testNullValueIsUnchangedWhenEnabled";d:0.003;s:82:"Paramee\Type\BooleanParameterTest::testEnumCheckRunsIfEnumPresent with data set #0";d:0.002;s:82:"Paramee\Type\BooleanParameterTest::testEnumCheckRunsIfEnumPresent with data set #1";d:0.003;s:69:"Paramee\Type\BooleanParameterTest::testEnumCheckFailsIfEnumNotPresent";d:0.002;s:84:"Paramee\Type\BooleanParameterTest::testDependencyTestRunsAndFailsIfMissingDependency";d:0.003;s:100:"Paramee\Type\BooleanParameterTest::testDependencyTestDoesNotRunWhenParameterValuesNotPassedToPrepare";d:0.002;s:94:"Paramee\Type\BooleanParameterTest::testDependencyTestRunsAndFailsIfOtherNotAllowedParamPresent";d:0.002;s:52:"Paramee\Type\IntegerParameterTest::testGetMultipleOf";d:0.001;s:52:"Paramee\Type\IntegerParameterTest::testSetMultipleOf";d:0.007;s:49:"Paramee\Type\IntegerParameterTest::testGetMinimum";d:0.001;s:49:"Paramee\Type\IntegerParameterTest::testSetMinimum";d:0.006;s:49:"Paramee\Type\IntegerParameterTest::testGetMaximum";d:0.001;s:49:"Paramee\Type\IntegerParameterTest::testSetMaximum";d:0.006;s:58:"Paramee\Type\IntegerParameterTest::testSetExclusiveMaximum";d:0.006;s:58:"Paramee\Type\IntegerParameterTest::testSetExclusiveMinimum";d:0.006;s:57:"Paramee\Type\IntegerParameterTest::testIsExclusiveMaximum";d:0.001;s:57:"Paramee\Type\IntegerParameterTest::testIsExclusiveMinimum";d:0.001;s:83:"Paramee\Type\IntegerParameterTest::testParameterDocumentationContainsExpectedValues";d:0.003;s:56:"Paramee\Type\IntegerParameterTest::testStringReturnsName";d:0.001;s:89:"Paramee\Type\IntegerParameterTest::testTypeCastWorksCorrectlyWhenEnabled with data set #0";d:0.004;s:89:"Paramee\Type\IntegerParameterTest::testTypeCastWorksCorrectlyWhenEnabled with data set #1";d:0.004;s:89:"Paramee\Type\IntegerParameterTest::testTypeCastWorksCorrectlyWhenEnabled with data set #2";d:0.004;s:89:"Paramee\Type\IntegerParameterTest::testTypeCastWorksCorrectlyWhenEnabled with data set #3";d:0.005;s:105:"Paramee\Type\IntegerParameterTest::testTypeCastThrowsExceptionForInvalidTypeWhenDisabled with data set #0";d:0.003;s:105:"Paramee\Type\IntegerParameterTest::testTypeCastThrowsExceptionForInvalidTypeWhenDisabled with data set #1";d:0.003;s:105:"Paramee\Type\IntegerParameterTest::testTypeCastThrowsExceptionForInvalidTypeWhenDisabled with data set #2";d:0.003;s:105:"Paramee\Type\IntegerParameterTest::testTypeCastThrowsExceptionForInvalidTypeWhenDisabled with data set #3";d:0.003;s:73:"Paramee\Type\IntegerParameterTest::testNullValueThrowsExceptionIfDisabled";d:0.003;s:80:"Paramee\Type\IntegerParameterTest::testNullValueWrapsPreparationStepsWhenEnabled";d:0.002;s:70:"Paramee\Type\IntegerParameterTest::testNullValueIsUnchangedWhenEnabled";d:0.003;s:82:"Paramee\Type\IntegerParameterTest::testEnumCheckRunsIfEnumPresent with data set #0";d:0.004;s:82:"Paramee\Type\IntegerParameterTest::testEnumCheckRunsIfEnumPresent with data set #1";d:0.004;s:82:"Paramee\Type\IntegerParameterTest::testEnumCheckRunsIfEnumPresent with data set #2";d:0.004;s:69:"Paramee\Type\IntegerParameterTest::testEnumCheckFailsIfEnumNotPresent";d:0.003;s:84:"Paramee\Type\IntegerParameterTest::testDependencyTestRunsAndFailsIfMissingDependency";d:0.003;s:100:"Paramee\Type\IntegerParameterTest::testDependencyTestDoesNotRunWhenParameterValuesNotPassedToPrepare";d:0.004;s:94:"Paramee\Type\IntegerParameterTest::testDependencyTestRunsAndFailsIfOtherNotAllowedParamPresent";d:0.003;s:90:"Paramee\Type\NumberParameterTest::testIntegerTypeCastToFloatOrDoubleWhenDecimalNotRequired";d:0.005;s:76:"Paramee\Type\NumberParameterTest::testIntegerTypeNotFailsWhenDecimalRequired";d:0.006;s:58:"Paramee\Type\NumberParameterTest::testIsRequireDecimalTrue";d:0.005;s:59:"Paramee\Type\NumberParameterTest::testIsRequireDecimalFalse";d:0.004;s:77:"Paramee\Type\NumberParameterTest::testIntegerAllowedWhenRequireDecimalIsFalse";d:0.005;s:79:"Paramee\Type\NumberParameterTest::testIntegerDisallowedWhenRequireDecimalIsTrue";d:0.003;s:61:"Paramee\Type\NumberParameterTest::testIntegerAllowedByDefault";d:0.005;s:51:"Paramee\Type\NumberParameterTest::testGetMultipleOf";d:0.001;s:51:"Paramee\Type\NumberParameterTest::testSetMultipleOf";d:0.008;s:48:"Paramee\Type\NumberParameterTest::testGetMinimum";d:0.002;s:48:"Paramee\Type\NumberParameterTest::testSetMinimum";d:0.006;s:48:"Paramee\Type\NumberParameterTest::testGetMaximum";d:0.001;s:48:"Paramee\Type\NumberParameterTest::testSetMaximum";d:0.007;s:57:"Paramee\Type\NumberParameterTest::testSetExclusiveMaximum";d:0.008;s:57:"Paramee\Type\NumberParameterTest::testSetExclusiveMinimum";d:0.008;s:56:"Paramee\Type\NumberParameterTest::testIsExclusiveMaximum";d:0.001;s:56:"Paramee\Type\NumberParameterTest::testIsExclusiveMinimum";d:0.001;s:82:"Paramee\Type\NumberParameterTest::testParameterDocumentationContainsExpectedValues";d:0.003;s:55:"Paramee\Type\NumberParameterTest::testStringReturnsName";d:0.001;s:88:"Paramee\Type\NumberParameterTest::testTypeCastWorksCorrectlyWhenEnabled with data set #0";d:0.004;s:88:"Paramee\Type\NumberParameterTest::testTypeCastWorksCorrectlyWhenEnabled with data set #1";d:0.004;s:104:"Paramee\Type\NumberParameterTest::testTypeCastThrowsExceptionForInvalidTypeWhenDisabled with data set #0";d:0.004;s:104:"Paramee\Type\NumberParameterTest::testTypeCastThrowsExceptionForInvalidTypeWhenDisabled with data set #1";d:0.003;s:72:"Paramee\Type\NumberParameterTest::testNullValueThrowsExceptionIfDisabled";d:0.003;s:79:"Paramee\Type\NumberParameterTest::testNullValueWrapsPreparationStepsWhenEnabled";d:0.002;s:69:"Paramee\Type\NumberParameterTest::testNullValueIsUnchangedWhenEnabled";d:0.004;s:81:"Paramee\Type\NumberParameterTest::testEnumCheckRunsIfEnumPresent with data set #0";d:0.005;s:81:"Paramee\Type\NumberParameterTest::testEnumCheckRunsIfEnumPresent with data set #1";d:0.004;s:81:"Paramee\Type\NumberParameterTest::testEnumCheckRunsIfEnumPresent with data set #2";d:0.004;s:81:"Paramee\Type\NumberParameterTest::testEnumCheckRunsIfEnumPresent with data set #3";d:0.004;s:68:"Paramee\Type\NumberParameterTest::testEnumCheckFailsIfEnumNotPresent";d:0.003;s:83:"Paramee\Type\NumberParameterTest::testDependencyTestRunsAndFailsIfMissingDependency";d:0.004;s:99:"Paramee\Type\NumberParameterTest::testDependencyTestDoesNotRunWhenParameterValuesNotPassedToPrepare";d:0.004;s:93:"Paramee\Type\NumberParameterTest::testDependencyTestRunsAndFailsIfOtherNotAllowedParamPresent";d:0.003;s:51:"Paramee\Type\ObjectParameterTest::testSetSchemaName";d:0.001;s:100:"Paramee\Type\ObjectParameterTest::testObjectWithNoExplicitPropertiesDefinedAllowsArbitraryParameters";d:0.003;s:113:"Paramee\Type\ObjectParameterTest::testObjectWithExplicitPropertiesDefinedDoesNotAllowArbitraryParametersByDefault";d:0.005;s:104:"Paramee\Type\ObjectParameterTest::testObjectWithExplicitPropertiesAndAllowExtraAllowsArbitraryParameters";d:0.006;s:67:"Paramee\Type\ObjectParameterTest::testSetMinPropertiesWithValidData";d:0.003;s:66:"Paramee\Type\ObjectParameterTest::testMinPropertiesWithInvalidData";d:0.006;s:67:"Paramee\Type\ObjectParameterTest::testSetMaxPropertiesWithValidData";d:0.003;s:66:"Paramee\Type\ObjectParameterTest::testMaxPropertiesWithInvalidData";d:0.005;s:96:"Paramee\Type\ObjectParameterTest::testNestedPropertiesArePreparedCorrectlyProcessedWithValidData";d:0.009;s:81:"Paramee\Type\ObjectParameterTest::testPropertiesThrowExceptionWithExpectedPointer";d:0.007;s:102:"Paramee\Type\ObjectParameterTest::testNestedPropertiesWithInvalidDataThrowExceptionWithExpectedPointer";d:0.01;s:92:"Paramee\Type\ObjectParameterTest::testRequiredPropertiesProduceTheCorrectDocumentationFormat";d:0.005;s:89:"Paramee\Type\ObjectParameterTest::testRequiredPropertiesThrowExceptionWhenValueNotPresent";d:0.006;s:82:"Paramee\Type\ObjectParameterTest::testParameterDocumentationContainsExpectedValues";d:0.002;s:55:"Paramee\Type\ObjectParameterTest::testStringReturnsName";d:0.001;s:88:"Paramee\Type\ObjectParameterTest::testTypeCastWorksCorrectlyWhenEnabled with data set #0";d:0.003;s:88:"Paramee\Type\ObjectParameterTest::testTypeCastWorksCorrectlyWhenEnabled with data set #1";d:0.004;s:104:"Paramee\Type\ObjectParameterTest::testTypeCastThrowsExceptionForInvalidTypeWhenDisabled with data set #0";d:0.003;s:104:"Paramee\Type\ObjectParameterTest::testTypeCastThrowsExceptionForInvalidTypeWhenDisabled with data set #1";d:0.005;s:72:"Paramee\Type\ObjectParameterTest::testNullValueThrowsExceptionIfDisabled";d:0.003;s:79:"Paramee\Type\ObjectParameterTest::testNullValueWrapsPreparationStepsWhenEnabled";d:0.002;s:69:"Paramee\Type\ObjectParameterTest::testNullValueIsUnchangedWhenEnabled";d:0.002;s:81:"Paramee\Type\ObjectParameterTest::testEnumCheckRunsIfEnumPresent with data set #0";d:0.004;s:81:"Paramee\Type\ObjectParameterTest::testEnumCheckRunsIfEnumPresent with data set #1";d:0.003;s:68:"Paramee\Type\ObjectParameterTest::testEnumCheckFailsIfEnumNotPresent";d:0.002;s:83:"Paramee\Type\ObjectParameterTest::testDependencyTestRunsAndFailsIfMissingDependency";d:0.002;s:99:"Paramee\Type\ObjectParameterTest::testDependencyTestDoesNotRunWhenParameterValuesNotPassedToPrepare";d:0.003;s:93:"Paramee\Type\ObjectParameterTest::testDependencyTestRunsAndFailsIfOtherNotAllowedParamPresent";d:0.003;s:45:"Paramee\Type\StringParameterTest::testSetTrim";d:0.002;s:50:"Paramee\Type\StringParameterTest::testSetMaxLength";d:0.009;s:50:"Paramee\Type\StringParameterTest::testSetMinLength";d:0.005;s:49:"Paramee\Type\StringParameterTest::testSetSanitize";d:0.002;s:47:"Paramee\Type\StringParameterTest::testSetLength";d:0.008;s:65:"Paramee\Type\StringParameterTest::testSetPatternWithPhpDelimiters";d:0.005;s:68:"Paramee\Type\StringParameterTest::testSetPatternWithoutPhpDelimiters";d:0.004;s:70:"Paramee\Type\StringParameterTest::testSetPatternFailsWithInvalidRegexp";d:0.002;s:67:"Paramee\Type\StringParameterTest::testSetFormatWorksWithValidFormat";d:0.001;s:79:"Paramee\Type\StringParameterTest::testSetFormatThrowsExceptionWithInvalidFormat";d:0.002;s:82:"Paramee\Type\StringParameterTest::testParameterDocumentationContainsExpectedValues";d:0.002;s:55:"Paramee\Type\StringParameterTest::testStringReturnsName";d:0.001;s:88:"Paramee\Type\StringParameterTest::testTypeCastWorksCorrectlyWhenEnabled with data set #0";d:0.002;s:88:"Paramee\Type\StringParameterTest::testTypeCastWorksCorrectlyWhenEnabled with data set #1";d:0.002;s:104:"Paramee\Type\StringParameterTest::testTypeCastThrowsExceptionForInvalidTypeWhenDisabled with data set #0";d:0.002;s:104:"Paramee\Type\StringParameterTest::testTypeCastThrowsExceptionForInvalidTypeWhenDisabled with data set #1";d:0.002;s:72:"Paramee\Type\StringParameterTest::testNullValueThrowsExceptionIfDisabled";d:0.002;s:79:"Paramee\Type\StringParameterTest::testNullValueWrapsPreparationStepsWhenEnabled";d:0.001;s:69:"Paramee\Type\StringParameterTest::testNullValueIsUnchangedWhenEnabled";d:0.002;s:81:"Paramee\Type\StringParameterTest::testEnumCheckRunsIfEnumPresent with data set #0";d:0.003;s:81:"Paramee\Type\StringParameterTest::testEnumCheckRunsIfEnumPresent with data set #1";d:0.002;s:81:"Paramee\Type\StringParameterTest::testEnumCheckRunsIfEnumPresent with data set #2";d:0.002;s:68:"Paramee\Type\StringParameterTest::testEnumCheckFailsIfEnumNotPresent";d:0.002;s:83:"Paramee\Type\StringParameterTest::testDependencyTestRunsAndFailsIfMissingDependency";d:0.002;s:99:"Paramee\Type\StringParameterTest::testDependencyTestDoesNotRunWhenParameterValuesNotPassedToPrepare";d:0.002;s:93:"Paramee\Type\StringParameterTest::testDependencyTestRunsAndFailsIfOtherNotAllowedParamPresent";d:0.002;}}}